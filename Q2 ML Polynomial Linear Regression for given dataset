Write a python program to implement Polynomial Linear Regression for a given dataset

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
import matplotlib.pyplot as plt

# Sample dataset
data = {'X': [1, 2, 3, 4, 5],
        'Y': [2, 4, 5, 4, 5]}
df = pd.DataFrame(data)

# Split the dataset into features (X) and target variable (Y)
X = df[['X']]
y = df['Y']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Transform the features to include polynomial terms up to degree 2
poly = PolynomialFeatures(degree=2)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

# Create a polynomial regression model
poly_model = LinearRegression()

# Fit the polynomial model to the training data
poly_model.fit(X_train_poly, y_train)

# Make predictions on the test data
y_pred = poly_model.predict(X_test_poly)

# Display the coefficients and intercept
print('Coefficients:', poly_model.coef_)
print('Intercept:', poly_model.intercept_)

# Plot the polynomial regression line
X_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
X_range_poly = poly.transform(X_range)
y_range_pred = poly_model.predict(X_range_poly)

plt.scatter(X_test, y_test, color='black', label='Actual data')
plt.plot(X_range, y_range_pred, color='blue', linewidth=3, label='Polynomial regression line')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()
